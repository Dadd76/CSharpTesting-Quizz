

 *** Quel est le rôle de l'intercepteur ? 

A) X Il éxécute une variété de tâches (par exemple, définir les en-têtes sur chaque requête, mettre en cache les requêtes) implicitement sur chaque méthode HttpClient
B) Il intercepte les actions de l'utilisateur afin de le rediriger vers une nouvelle page
C) Il effectue des optimisations sur les appels HTTP
D) Il est utilisé principalement dans les tests


Rôle des Intercepteurs
Ajouter des en-têtes communs : Tu peux utiliser un intercepteur pour ajouter des en-têtes communs à toutes les requêtes HTTP, comme les jetons d'authentification ou des en-têtes spécifiques à une API.

Gérer les erreurs globalement : Les intercepteurs peuvent intercepter les réponses HTTP et gérer les erreurs de manière centralisée, en affichant des messages d'erreur à l'utilisateur ou en redirigeant vers une page de connexion en cas d'erreur d'authentification.

Transformer les requêtes et les réponses : Les intercepteurs peuvent transformer les données des requêtes avant qu'elles ne soient envoyées, et transformer les réponses avant qu'elles ne soient traitées par les composants de l'application.

Journalisation : Tu peux utiliser un intercepteur pour enregistrer des informations sur les requêtes et les réponses, ce qui peut être utile pour le débogage ou la surveillance.


*** Quel est le type de 'valueChanges' sur un 'FormControl' ? 
A) X Observable <any> 
B) Any 
C) Array<any>
D) Unknow

Ce type signifie que valueChanges est un observable qui émet des valeurs de type any chaque fois que la valeur du contrôle change.

*** Laquelle des syntaxes suivantes est correcte pour effectuer le chargement paresseux (lazy load) d'un module ? 
A) X
const routes : Routes = [{
    path : 'lazy',
    loadChildren:() => import('./lazy!:lazy.module).then(m=>LazyModule)
}];

B) 
const routes : Routes = [{
    path : 'lazy',
    loadChildren : './lazy!:lazy.module#LazyModule'
}];

C) 
import {lazyModule} from './lazy/lazy.module';
const routes : Routes = [{
    path : 'lazy',
    loadChildren: LazyModule
}];


D) 
const lazyModule = import('./lazy!:lazy.module).then(m=>LazyModule)
const routes : Routes = [{
    path : 'lazy',
    loadChildren: LazyModule
}];



*** Quelle est la syntaxe pour la liaison de données bidirectionnelle (two way data binding) ? 
A) <my-component> [myprop]="20" </my-component>
B) <my-component> {myprop}="20" </my-component>
C) X  <my-component> [{myprop}]="20" </my-component>
D) <my-component> myprop="20" </my-component>


*** Combien de directive structurelles pouvez-vous placer sur un élément ?
A) Il n'y a pas de limite
B) X 1
C) 2
D) 3

En Angular, on ne peut placer qu'une seule directive structurelle sur un élément. Les directives structurelles modifient la structure du DOM en ajoutant, supprimant ou manipulant des éléments DOM. Elles sont identifiées par un préfixe *.

Exemple de directives structurelles
Voici quelques exemples de directives structurelles couramment utilisées :

*ngIf : Conditionne l'inclusion d'un élément dans le DOM.
*ngFor : Itère sur une collection et génère un ensemble d'éléments.
*ngSwitch : Utilise *ngSwitchCase et *ngSwitchDefault pour afficher des éléments en fonction d'une condition.


En Angular, on ne peut placer qu'une seule directive structurelle sur un élément. Les directives structurelles modifient la structure du DOM en ajoutant, supprimant ou manipulant des éléments DOM. Elles sont identifiées par un préfixe *.

Exemple de directives structurelles
Voici quelques exemples de directives structurelles couramment utilisées :

*ngIf : Conditionne l'inclusion d'un élément dans le DOM.
*ngFor : Itère sur une collection et génère un ensemble d'éléments.
*ngSwitch : Utilise *ngSwitchCase et *ngSwitchDefault pour afficher des éléments en fonction d'une condition.
Pourquoi une seule directive structurelle ?
Les directives structurelles manipulent directement la structure du DOM, ce qui implique des changements importants et complexes. Autoriser plusieurs directives structurelles sur le même élément pourrait entraîner des comportements imprévisibles ou des conflits dans la manipulation du DOM.

*** Quel sélecteur peut être utilisé pour styliser un composant en fonction d'une condition en dehors de la vue 
A) X :host-context
B) ::ng-deep
C) &
D) :host

En Angular, le sélecteur :host-context peut être utilisé pour appliquer des styles à un composant en fonction d'une condition qui est définie en dehors de la vue 
du composant. Ce sélecteur est particulièrement utile pour appliquer des styles conditionnels en fonction de l'arbre DOM environnant.

Utilisation de :host-context
Le sélecteur :host-context permet d'appliquer des styles à un composant en fonction d'une classe ou d'un état présent sur un ancêtre du composant.
Cela signifie que si un élément parent (ou tout autre ancêtre dans le DOM) possède une certaine classe, les styles définis à l'intérieur de :host-context seront 
appliqués au composant.

*** Quand un pipe est impur est il éxécuté ?  
A) Lorsque les paramêtre du pipe changent
B) X A chaque cycle de détection de changement 
C) Une seul fois 

Pipes Purs : Un pipe pur est un pipe dont la propriété pure est définie sur true. Par défaut, tous les pipes en Angular sont purs. Un pipe pur est exécuté uniquement 
lorsque Angular détecte un changement dans la valeur d'entrée ou dans une des valeurs de référence passées au pipe.

Pipes Impurs : Un pipe impur est un pipe dont la propriété pure est définie sur false. Un pipe impur est exécuté à chaque détection de changement dans l'application, 
c'est-à-dire à chaque cycle de détection de changement d'Angular.


*** Laquelle des syntaxes suivantes complètes le code suivant afin qu'il affiche "Hello Angular !", étant donné que isTrue  false ?  
<span> Hello <span...>world</span></span>
<ng-template #hi> Angular </ng-template>

A)   *ngIf ="isTrue ? : 'Angular'"
B)   *ngSwitchCase = "'angular'"
C) X *ngIf ="isTrue ? : else 'hi'"
C)   *ngIf ="isTrue ? : 'hi'"

***  Comment puvez-vous fournir une instance séparée du service "MyMockService" dans chaque instance d'un composant ?

A)   Garder une trace de l'utilisations dans le service
B)   Fournir le service au niveau d'un module 
C) X Ajouter le service dans le tableau des fournisseur du composant ( a vérifier)
C)   Aucune réponse ci-dessous


***  Comment pouvez-vous configurer l'événement sur lequel un form
control se met à jour  ?

A) X new FormControl('', {updateOn:'blur'});
B)   new FormControl('', {update:'blur'});
C)   new FormControl('', {changeOn:'blur'});
C)   new FormControl('', {change:'blur'});

En Angular, vous pouvez configurer l'événement sur lequel un FormControl se met à jour en utilisant la propriété updateOn lors de la création des contrôles de formulaire. La propriété updateOn peut être définie sur 'change', 'blur' ou 'submit', déterminant ainsi quand les valeurs du formulaire et la validation seront mises à jour.

Options de updateOn
'change' (par défaut) : Met à jour les valeurs et la validation du contrôle chaque fois qu'un événement de changement se produit.
'blur' : Met à jour les valeurs et la validation du contrôle lorsque l'utilisateur quitte le champ (événement blur).
'submit' : Met à jour les valeurs et la validation du contrôle uniquement lorsque le formulaire est soumis.

***  Laquelle des méthodes n'est pas une méthode du cycle de vie ? 

A)   ngOnInit() ;
B)   ngAfterViewChecked() ;
C)   ngAfterContentInit() ;
C) X ngCheck() ;

Les principaux hooks de cycle de vie disponibles pour les composants et directives Angular :

ngOnChanges(changes: SimpleChanges) :
Appelé avant ngOnInit et chaque fois qu'une ou plusieurs propriétés d'entrée liées à des données changent.
Paramètre changes : Un objet de type SimpleChanges qui contient les nouvelles valeurs des propriétés d'entrée.

ngOnInit() :
Appelé une seule fois après la première ngOnChanges.
Idéal pour initialiser les données du composant ou de la directive.

ngDoCheck() :
Appelé pendant chaque cycle de détection de changement, après ngOnChanges et ngOnInit.
Utilisé pour exécuter une détection de changement personnalisée.

ngAfterContentInit() :
Appelé une seule fois après l'insertion du contenu externe dans la vue du composant.

ngAfterContentChecked() :
Appelé après chaque cycle de vérification du contenu inséré.

ngAfterViewInit() :
Appelé une seule fois après l'initialisation des vues de composant et des vues enfants.

ngAfterViewChecked() :
Appelé après chaque cycle de vérification des vues de composant et des vues enfants.

ngOnDestroy() :
Appelé juste avant la destruction du composant ou de la directive.
Utilisé pour effectuer des tâches de nettoyage, comme la désinscription des observables ou la suppression de gestionnaires d'événements.

***  Combien de fois console.log() sera appelé dans l exemple suivant ? 

import {of} from 'rjxs'

of([2.3.4]).subscribe({next : n log(n)})

A)   1
B) X 3 (à vérifier)
C)   le code n est pas correct of n est pas 
C)   aucune réponse ci dessus

*** parmis les lignes de code suivant laquel définit l'attribut colspan sur l'élément td ?   

A)   <td [attr.colspan]="1+1">One-two</td>
B)   <td [colspan]="1+1">One-two</td>
C)   Aucune réponse ci dessus 


La différence entre les deux codes réside dans la façon dont la valeur de l'attribut colspan est traitée.

<td [attr.colspan]="1+1">One-two</td> : Cette syntaxe utilise la liaison d'attribut ([attr.xxx]) 
pour lier dynamiquement la valeur de l'attribut colspan. Cela signifie que la valeur 2 (résultat de 1+1) est traitée comme une chaîne 
de caractères et insérée directement dans l'attribut colspan de l'élément <td>. C'est utile lorsque vous avez besoin de lier dynamiquement 
des attributs basés sur des expressions.

<td [colspan]="1+1">One-two</td> : Cette syntaxe utilise la liaison de propriété standard ([xxx]) pour lier dynamiquement la propriété colspan. 
Dans ce cas, Angular essaiera de lier la valeur de 1+1 directement à la propriété colspan. Cependant, l'élément <td> ne possède pas de propriété 
colspan par défaut, il n'y aura donc aucun effet visible sur l'élément.

En résumé, la principale différence réside dans le type de liaison utilisé : attr.xxx pour lier dynamiquement des attributs 
HTML et xxx pour lier des propriétés d'éléments Angular. Dans le cas des attributs HTML spéciaux comme colspan, il est recommandé d'utiliser 
la syntaxe attr.xxx pour assurer la liaison correcte de l'attribut.

***  A quel crochet (hook) du cycle de vie (lifeCycle) cette requête viewChild sera accessible ? 
@viewChild(foo, {static:false} ) foo : ElementRef;

A)   ngOnInit() ;
B)   constructor
C)   ngAfterContentChecked() :
D) X ngAfterViewInit() :

La requête @ViewChild dans Angular est généralement utilisée pour obtenir une référence à un élément du DOM ou à un composant 
enfant dans un composant parent. La question de savoir à quel crochet du cycle de vie cette référence sera accessible dépend de 
l'élément ou du composant que vous essayez de référencer et de son cycle de vie.

En général, la propriété @ViewChild avec {static: false} sera accessible après la phase ngAfterViewInit() du cycle de vie du composant parent.

Explication
{static: false} indique à Angular que la recherche de l'élément ou du composant spécifié par la requête @ViewChild doit être effectuée 
après la phase ngAfterViewInit() du cycle de vie du composant parent.

ngAfterViewInit() est le hook de cycle de vie Angular appelé après que la vue du composant parent et toutes les vues enfants ont été initialisées.


***  Quel est la syntaxe correct pour une variable de référence de modèle ? 
A) X <button #myButton>
B)  <button #myButton='this'>
C)  <button *myButton>
D)  <button *myButton='this'>

button est l'élément HTML auquel vous souhaitez faire référence.
 #myButton est la déclaration de la variable de référence de modèle.



